---

name: Sintaxis Simplificada de Funciones
theory: |

  En comparación con algunos lenguajes (principalmente funcionales), la definición de funciones en JavaScript puede parecer bastante verbosa:

  ```javascript
  const cuadrado = (x) => {
    return x ** 2;
  };
  ```

  Aquí se usan muchos símbolos adicionales y la palabra `return`. Desde la versión ES6, el lenguaje introdujo una sintaxis alternativa y simplificada que en algunas situaciones hace que el código sea más legible y reduzca la cantidad de código.

  ```javascript
  // Puede llevar tiempo acostumbrarse a esta forma
  // pero luego no podrás vivir sin ella
  const doble = (x) => x ** 2;
  ```

  Las diferencias con la versión completa son dos: desaparecieron las llaves y la instrucción `return`. La forma simplificada de una función realiza el retorno automáticamente. Se asume que dentro de dicha función solo hay una expresión que se evalúa y su resultado se devuelve directamente.

  Es importante resaltar que las diferencias son únicamente de sintaxis, desde el punto de vista de su uso no hay diferencias. Un ejemplo con dos argumentos:

  Versión completa

  ```javascript
  const suma = (a, b) => {
    return a + b;
  };
  ```

  Versión simplificada

  ```javascript
  const suma = (a, b) => a + b;
  ```

  https://replit.com/@hexlet/js-basics-define-functions-short-syntax

  Ten en cuenta la ausencia de las llaves. Los desarrolladores que no están acostumbrados a este tipo de sintaxis a veces escriben código como `const suma = (a, b) => { a + b };` y luego se preguntan por qué no funciona. La respuesta es simple: si hay llaves, entonces no se está usando la forma simplificada y tendrás que agregar la palabra `return` para que la función devuelva un valor.

instructions: |

  Implementa la función `capitalizar()`, que recibe una cadena no vacía y convierte la primera letra de la primera palabra a mayúscula:

  ```javascript
  const nombre = 'arya';
  console.log(capitalizar(nombre)); // => Arya
  ```

  Para obtener una subcadena (o un carácter) de una cadena, utiliza el método [slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice):

  ```javascript
  'bienvenida'.slice(2, 5); // lco
  ```

  Para convertir una cadena a mayúsculas, utiliza el método [toUpperCase()](https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)

  ```javascript
  'bienvenida'.toUpperCase(); // BIENVENIDA
  ```

tips:
  - |
    [JavaScript ES6](https://www.w3schools.com/js/js_es6.asp)